#+TITLE: org-mode and rmarkdown for literature programming
#+AUTHOR: Johannes Rainer
#+email: johannes.rainer@eurac.edu
#+SETUPFILE: orgsetup.org
#+FILETAGS:
#+CATEGORY:
-----

#+BEGIN_EXPORT md
---
graphics: yes
output:
  BiocStyle::html_document:
    toc_depth: 2
    md_extensions: +pipe_tables+table_captions
  BiocStyle::pdf_document:
    toc_depth: 2
# bibliography: references.bib
# csl: biomed-central.csl
# references:
# - id: dummy
#   title: no title
#   author:
#   - family: noname
#     given: noname
---
#+END_EXPORT


* Some notes on the usage of =org-mode= for literature programming

Emacs =org-mode= works nice, but sometimes it might also be helpful to have the
analysis documents ready in =Rmd= format (i.e. for =rmarkdown=). This comes
especially handy for sharing analysis documents with people not using Emacs. The
[[https://github.com/chasberry/orgmode-accessories.git][orgmode-accessories]] provide an export function to convert =org= files to =Rmd=,
but not all options etc from =org-mode= are directly and correctly mapped. Thus,
in this document I try to define some rules that allow to export =org= files
into =Rmd= files that can be rendered into comparable documents.

** File setup

We can include an external containing some common definitions which might then
also be re-used by other files. To include this file we can add the
=#+SETUPFILE: <file name>= line to the beginning of the file. For this =org=
file we're using [[file:orgsetup.org]]. Note however, that all =rmarkdown= related
headers and settings have to be defined within the actual document, as the
=ox-ravel= exporter does not read that setup file. The setup for the =Rmd= file
has to be placed within =#+BEGIN_EXPORT md= and =#+END_EXPORT= lines (see
header of this file for an example).

** Code blocks

To enable both =org-mode= export and =rmarkdown= rendering we have to define
header arguments for both, i.e. the =org-mode= header arguments as we're used
to, and in addition =,= delimited header arguments for =rmarkdown= following the
=:ravel= keyword. The =ox-ravel= exporter from the =orgmode-accessories= package
will include only these into the source block header of the exported  =Rmd=
file.

#+NAME: libraries
#+BEGIN_SRC R :results silent
  library(ascii)
  library(pander)
  library(knitr)
  ## Just some plain dummy R-code
  3 + 3
#+END_SRC


** Figures

Unfortunately, in =org-mode= we have to specify the image file name with the
=:file= argument (which is obviously ignored by =ox-ravel=). Thus, in order to
generate code blocks that work both in =org= mode and also in the exported =Rmd=
file, we should a) name the code block with the figure name (without extension)
and use the =:file= header argument for =org=.

#+NAME: fig-test-org
#+BEGIN_SRC R :exports results :results graphics :file fig-test-org.png :width 5 :height 4 :units cm :res 600 :pointsize 6 :ravel fig.cap="I'm the figure caption as defined in the :ravel header.", width=5, height=4, units="cm", res=600, pointsize=6
  plot(3, 3, pch=16, main="Meaningful plot")
#+END_SRC
#+ATTR_LATEX: :center :placement [H] :width 5cm
#+CAPTION: I'm the caption from the figure, as defined in the org file.
#+NAME: figure-fig-test-org
#+RESULTS: fig-test-org

Now, we would like to reference the plot, which is shown in Figure
[[figure-fig-test-org]] (we're using the =org= link to the name of the
caption/figure; that will however not work in the exported =Rmd= file).


** Tables

By specifying =type = 'org'= , the  =ascii= package allows to print an =R=
=data.frame= or =matrix= as an =org= table.

#+NAME: table-test
#+BEGIN_SRC R :results output raw :exports results :ravel results='asis'
  ## Define a simple table.
  Tab <- data.frame(a=c(1, 4), b=c(4, 6))
  ## Print it as an ascii org table
  suppressWarnings(
      print(
          ascii(Tab, header=TRUE)
	, type="org")
  )

#+END_SRC
#+RESULTS: table-test

Testing =pander= tables:

#+NAME: pander-table-test
#+BEGIN_SRC R :results output raw :exports results :ravel results='asis'
  library(pander)
  ## Define a simple table.
  Tab <- data.frame(a=c(1, 4), b=c(4, 6))
  ## Print it as an ascii org table
  pandoc.table(Tab, style="grid")

#+END_SRC

#+RESULTS: pander-table-test

The same table but with =style= being ="rmarkdown"= . That does only work for
=org= export, however with right justification.

#+NAME: pander-table-test-markdown
#+BEGIN_SRC R :results output raw :exports results :ravel results='asis'
  ## Define a simple table.
  Tab <- data.frame(a=c(1, 4), b=c(4, 6))
  ## Print it as an ascii org table
  pandoc.table(Tab, style="rmarkdown", justify="rr", caption="I am a simple caption.")

#+END_SRC

#+RESULTS: pander-table-test-markdown


Tables with =knitr=: =markdown= format seems to be supported in =org= export,
=pandoc=, or =rst= format not.

#+NAME: knitr-table-markdown
#+BEGIN_SRC R :results output raw :exports results :ravel results='asis'
  library(knitr)
  kable(Tab, format="markdown", caption="This is just a test caption.")
#+END_SRC

#+RESULTS: knitr-table-markdown


=kable= tables seem to be supported by =org= too, but they don't allow to use
captions. The worst case scenario is to add two table exports, one that works
for =org-mode= and one that can be used in the exported =Rmd=. This could be
done in the following way:

#+NAME: example-org-table
#+BEGIN_SRC R :results output raw :exports results :ravel eval=FALSE, echo=FALSE, results='hide'
  suppressWarnings(
      print(
          ascii(Tab, caption="Any caption generated by the ascii package.", header=TRUE)
      , type="org")
  )

#+END_SRC
#+RESULTS: example-org-table

#+NAME: example-knitr-table
#+BEGIN_SRC R :eval never :exports results :ravel echo=FALSE, results='asis'
  pandoc.table(Tab, style="rmarkdown", caption="I am a simple caption generated with pander.")

#+END_SRC

** Code block re-usage

=org-mode= supports =noweb= syntax, i.e. code blocks can be re-used in another
code block using =<<code-name>>=. From my experience, in contrast to
e.g. =Sweave=, this should be used with caution, as larger analysis documents
with lots of reused code blocks can become slow or even unresponsive when
processed and exported in Emacs.

